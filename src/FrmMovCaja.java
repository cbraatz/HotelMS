
import Hiber1.Apeyciecaja;
import Hiber1.Banco;
import Hiber1.Caja;
import Hiber1.Documentos;
import Hiber1.Formapago;
import Hiber1.Moneda;
import Hiber1.Movcaja;
import Hiber1.NewHibernateUtil;
import Hiber1.Tipomov;
import Soporte.clasesutiles;
import imp.ApeyciecajaGest;
import imp.CajaGest;
import imp.DocumentoGest;
import imp.MovCajaGest;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

public class FrmMovCaja extends javax.swing.JDialog {

    /** Creates new form FrmMovCaja */
    public FrmMovCaja(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jButton9 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel43 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel46 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel49 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel50 = new javax.swing.JLabel();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jLabel45 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox();
        jLabel51 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jLabel54 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jPanel2.setBackground(new java.awt.Color(153, 153, 255));
        jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel2.setName(""); // NOI18N

        jLabel5.setFont(new java.awt.Font("Trebuchet MS", 1, 36));
        jLabel5.setForeground(new java.awt.Color(0, 0, 153));
        jLabel5.setText("Movimientos de Caja");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 41, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        jPanel5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel5.setName(""); // NOI18N

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/salir2.png"))); // NOI18N
        jButton9.setToolTipText("SALIR");
        jButton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton9MouseClicked(evt);
            }
        });

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/limpiar2.png"))); // NOI18N
        jButton8.setToolTipText("LIMPIAR");
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton8MouseClicked(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar2.png"))); // NOI18N
        jButton3.setToolTipText("REGISTRAR MOVIMIENTO");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo2.png"))); // NOI18N
        jButton6.setToolTipText("NUEVO");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/borrar2.png"))); // NOI18N
        jButton7.setToolTipText("BORRAR");
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton7MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton7MouseEntered(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(143, Short.MAX_VALUE)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton9)
                    .addComponent(jButton3)
                    .addComponent(jButton8)
                    .addComponent(jButton7)
                    .addComponent(jButton6))
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)), "Movimientos de Caja", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(0, 0, 153))); // NOI18N

        jLabel43.setFont(new java.awt.Font("Trebuchet MS", 1, 14));
        jLabel43.setForeground(new java.awt.Color(0, 0, 204));
        jLabel43.setText("Tipo movimiento:");

        jComboBox1.setToolTipText("TIPO DE MOVIMIENTO");
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jComboBox1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox1FocusGained(evt);
            }
        });

        jLabel46.setFont(new java.awt.Font("Trebuchet MS", 1, 14));
        jLabel46.setForeground(new java.awt.Color(0, 0, 204));
        jLabel46.setText("Forma movimiento:");

        jComboBox2.setToolTipText("FORMA DEL MOVIMIENTO");
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });
        jComboBox2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox2FocusGained(evt);
            }
        });

        jLabel49.setFont(new java.awt.Font("Trebuchet MS", 1, 14));
        jLabel49.setForeground(new java.awt.Color(0, 0, 204));
        jLabel49.setText("Documento Nº:");

        jTextField1.setBackground(new java.awt.Color(153, 153, 255));
        jTextField1.setEditable(false);
        jTextField1.setToolTipText("NÚMERO DEL DOCUMENTO (si no es efectivo)");
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jLabel52.setFont(new java.awt.Font("Trebuchet MS", 1, 14));
        jLabel52.setForeground(new java.awt.Color(0, 0, 204));
        jLabel52.setText("Banco:");

        jComboBox3.setToolTipText("BANCO");
        jComboBox3.setEnabled(false);
        jComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });
        jComboBox3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox3FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jComboBox3FocusLost(evt);
            }
        });

        jLabel50.setFont(new java.awt.Font("Trebuchet MS", 1, 14));
        jLabel50.setForeground(new java.awt.Color(0, 0, 204));
        jLabel50.setText("Fecha de venc.:");

        jFormattedTextField1.setEditable(false);
        try {
            jFormattedTextField1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFormattedTextField1.setToolTipText("FECHA DE VENCIMIENTO DEL DOCUMENTO (si no es efectivo)");
        jFormattedTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextField1FocusLost(evt);
            }
        });
        jFormattedTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jFormattedTextField1KeyReleased(evt);
            }
        });

        jLabel45.setFont(new java.awt.Font("Trebuchet MS", 1, 14));
        jLabel45.setForeground(new java.awt.Color(0, 0, 204));
        jLabel45.setText("Importe movido:");

        jTextField2.setText("0.0");
        jTextField2.setToolTipText("IMPORTE MOVIDO");
        jTextField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField2FocusLost(evt);
            }
        });
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField2KeyReleased(evt);
            }
        });

        jLabel44.setFont(new java.awt.Font("Trebuchet MS", 1, 14));
        jLabel44.setForeground(new java.awt.Color(0, 0, 204));
        jLabel44.setText("Moneda:");

        jComboBox4.setToolTipText("MONEDA");
        jComboBox4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox4MouseClicked(evt);
            }
        });
        jComboBox4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox4ItemStateChanged(evt);
            }
        });
        jComboBox4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox4FocusGained(evt);
            }
        });

        jLabel51.setFont(new java.awt.Font("Trebuchet MS", 1, 14));
        jLabel51.setForeground(new java.awt.Color(0, 0, 204));
        jLabel51.setText("Obs. Documento:");

        jTextField3.setEditable(false);
        jTextField3.setToolTipText("OBSERVACIONES (si no es efectivo)");
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
        });

        jLabel53.setFont(new java.awt.Font("Trebuchet MS", 1, 14));
        jLabel53.setForeground(new java.awt.Color(0, 0, 204));
        jLabel53.setText("Obs. Movimiento:");

        jTextField4.setToolTipText("OBSERVACIONES DEL MOVIMIENTO");
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField4KeyTyped(evt);
            }
        });

        jTextField5.setToolTipText("NÚMERO DE COMPROBANTE DEL MOVIMIENTO");
        jTextField5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField5KeyTyped(evt);
            }
        });

        jLabel54.setFont(new java.awt.Font("Trebuchet MS", 1, 14));
        jLabel54.setForeground(new java.awt.Color(0, 0, 204));
        jLabel54.setText("Comprobante Nº:");

        jPanel6.setBackground(new java.awt.Color(204, 204, 204));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/primero2.png"))); // NOI18N
        jButton1.setToolTipText("PRIMERO");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/anterior2.png"))); // NOI18N
        jButton2.setToolTipText("ANTERIOR");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/siguiente2.png"))); // NOI18N
        jButton4.setToolTipText("SIGUIENTE");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/ultimo2.png"))); // NOI18N
        jButton5.setToolTipText("ÚLTIMO");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(82, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel54)
                    .addComponent(jLabel44)
                    .addComponent(jLabel45)
                    .addComponent(jLabel49)
                    .addComponent(jLabel46)
                    .addComponent(jLabel43)
                    .addComponent(jLabel51)
                    .addComponent(jLabel52)
                    .addComponent(jLabel50)
                    .addComponent(jLabel53))
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextField1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, 0, 175, Short.MAX_VALUE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel46))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel49))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel52)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel50)
                    .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel51)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel44)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel54))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel53))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //para el navegador de busqueda//
        Session Sesion=null;
        Query consulta;
        List milista;
        int x=0;  //bandera que indica si se hizo algun cambio y actualizar el navegador
        int contador=1;  //contador de la posicion actual del navegador
        int codigomov=0;
    ///////////////////////////////////

    DefaultComboBoxModel modelocombomoneda1=new DefaultComboBoxModel();
    DefaultComboBoxModel modelocombomoneda2=new DefaultComboBoxModel();  //guarda el codigo
    DefaultComboBoxModel modelocombobanco1=new DefaultComboBoxModel();
    DefaultComboBoxModel modelocombobanco2=new DefaultComboBoxModel();  //guarda el codigo
    DefaultComboBoxModel modelocomboformamov1=new DefaultComboBoxModel();
    DefaultComboBoxModel modelocomboformamov2=new DefaultComboBoxModel(); //guarda el codigo
    DefaultComboBoxModel modelocombotipomov1=new DefaultComboBoxModel();
    DefaultComboBoxModel modelocombotipomov2=new DefaultComboBoxModel(); //guarda el codigo
    String fechadehoy="";
    clasesutiles cluti=new clasesutiles();
    Tipomov tipomo=new Tipomov();
    Banco ban=new Banco();
    Formapago forpa=new Formapago();
    boolean bancoencontrado=false;
    boolean encontrodocum=false;
    boolean bandera=true; //se hace true al entrar a un combo para no ejecutar 2 veces
    ApeyciecajaGest apeges=new ApeyciecajaGest();
    Movcaja movi=new Movcaja();
  public void actualizarFechaDeHoy(){
        fechadehoy=cluti.Date_StringDMA(clasesutiles.Calender_Date(Calendar.getInstance()));
    }

  public void CERRARSesion(){
    if(Sesion.isOpen()){
        Sesion.flush();
        Sesion.clear();
        Sesion.close();
    }
 }

 public void limpiarTodo(){
     jTextField1.setText("");
     jTextField2.setText("0.0");
     jTextField3.setText("");
     jTextField4.setText("");
     jTextField5.setText("");
     this.codigomov=0;
     jFormattedTextField1.setText("");
     this.ubicarComboMoneda(1);
     this.ubicarComboForma(1);
     this.ubicarComboTipoMov(1);
     this.ubicarComboBanco(0);
     this.habilitarODeshabilitarCampos();
   }

 public void habilitarODeshabilitarCampos(){  //habilita o deshabilita campos de acuerdo a la necesidad
    //bandera2=false;
    System.out.println("entra");
    this.obtenerObjetoFormaPagoDeCombo();
    this.obtenerObjetoTipoMovDeCombo();
    if(this.forpa.getIdforma()==1){  //si es efectivo
        jTextField1.setEditable(false);
        jComboBox3.setEnabled(false);
        jFormattedTextField1.setEditable(false);
        jTextField2.setEditable(true);
        jComboBox4.setEnabled(true);
        jTextField3.setEditable(false);
    }else{
        if(this.tipomo.getCredito()=='1'){  //si extrae un documento
            if(forpa.getTienenumero()=='1')
                jTextField1.setEditable(true);
            else
                jTextField1.setEditable(false);
            if(forpa.getTienebanco()=='1')
                jComboBox3.setEnabled(true);
            else
                jComboBox3.setEnabled(false);
            jFormattedTextField1.setEditable(false);
            jTextField2.setEditable(false);
            jComboBox4.setEnabled(false);
            jTextField3.setEditable(false);
        }else{  //si deposita un documento
             if(forpa.getTienenumero()=='1')
                jTextField1.setEditable(true);
             else
                jTextField1.setEditable(false);
             if(forpa.getTienebanco()=='1')
                jComboBox3.setEnabled(true);
             else
                jComboBox3.setEnabled(false);
             if(forpa.getTienefecha()=='1')
                jFormattedTextField1.setEditable(true);
             else
                jFormattedTextField1.setEditable(false);
           
             jTextField2.setEditable(true);
             jComboBox4.setEnabled(true);
             jTextField3.setEditable(true);
        }
       if(forpa.getSologs()=='1'){
            this.ubicarComboMoneda(1);
            this.jComboBox4.setEnabled(false);
        }else
            this.jComboBox4.setEnabled(true);
    }
    
  }
  public void ubicarComboMoneda(int cod){
        int lon=this.modelocombomoneda2.getSize();
        for(int i=0;i<lon;i++){
            int codi=Integer.parseInt(modelocombomoneda2.getElementAt(i).toString());
            if(codi==cod)
                this.jComboBox4.setSelectedIndex(i);  //ubica el combo en la posicion correcta
        }
   }

  public void buscarMovimiento(int cod){
      Movcaja mov=new Movcaja();
      Sesion = NewHibernateUtil.getSessionFactory().openSession();
      Transaction tx=Sesion.beginTransaction();
      mov=(Movcaja) Sesion.get(Movcaja.class, cod);
      if(mov!=null){
            this.ubicarComboMoneda(mov.getMoneda().getIdmoneda());
            this.ubicarComboTipoMov(mov.getTipomov().getIdtipomov());
            this.ubicarComboForma(mov.getFormapago().getIdforma());

            if(mov.getDocumentos()!=null){
                this.jTextField3.setText(mov.getDocumentos().getObsdoc());
                if(mov.getFormapago().getTienenumero()=='1')
                    this.jTextField1.setText(mov.getDocumentos().getNumerodoc());
                else
                    this.jTextField1.setText("");
                if(mov.getFormapago().getTienefecha()=='1')
                    this.jFormattedTextField1.setText(cluti.ObtenerFechaSinGuion(cluti.Date_StringDMA(mov.getDocumentos().getFechavenc())));
                else
                    this.jFormattedTextField1.setText("        ");
                if(mov.getFormapago().getTienebanco()=='1')
                    this.ubicarComboBanco(mov.getDocumentos().getBanco().getIdbanco());
                else
                    this.ubicarComboBanco(0);
            }
            else{
                this.jTextField1.setText("");
                this.jTextField3.setText("");
                this.jFormattedTextField1.setText("        ");
                this.ubicarComboBanco(0);
            }

            this.jTextField2.setText(mov.getMontomov().toString());
            this.jTextField5.setText(mov.getNumcompro());
            this.jTextField4.setText(mov.getObs());
            this.codigomov=mov.getIdmov();
            tx.commit();
            this.CERRARSesion();
            this.obtenerObjetoFormaPagoDeCombo();
            this.obtenerObjetoTipoMovDeCombo();
            this.obtenerObjetoBancoDeCombo();
      }
 }

 public void ubicarComboForma(int cod){
        int lon=modelocomboformamov2.getSize();
        for(int i=0;i<lon;i++){
            int codi=Integer.parseInt(modelocomboformamov2.getElementAt(i).toString());
            if(codi==cod)
                this.jComboBox2.setSelectedIndex(i);  //ubica el combo en la posicion correcta
        }
   }
  public void ubicarComboBanco(int cod){
        int lon=this.modelocombobanco2.getSize();
        for(int i=0;i<lon;i++){
            int codi=Integer.parseInt(modelocombobanco2.getElementAt(i).toString());
            if(codi==cod){
                this.jComboBox3.setSelectedIndex(i);  //ubica el combo en la posicion correcta
            }
        }
   }
  public void ubicarComboTipoMov(int cod){
        int lon=this.modelocombotipomov2.getSize();
        for(int i=0;i<lon;i++){
            int codi=Integer.parseInt(modelocombotipomov2.getElementAt(i).toString());
            if(codi==cod)
                this.jComboBox4.setSelectedIndex(i);  //ubica el combo en la posicion correcta
        }
   }
  public boolean estanCompletosLosCamposPago(Formapago forma1, Banco ban, String nudo, String fec){
    int resul=0;
    if(forma1.getTienebanco()=='1'){
        if(bancoencontrado==false)   //aca busca el banco y pregunta si se encontro
            resul++;
    }
    if(forma1.getTienefecha()=='1'){
        if(cluti.FechaValidaDMA(fec)==false)
            resul++;
    }
    if(forma1.getTienenumero()=='1'){
        if(nudo.isEmpty())
            resul++;
    }
    if (resul==0)
        return true;
    else
        return false;
  }
 public boolean borrarMovimiento(int codigo){
        boolean resu=false;
        Movcaja movim=(Movcaja) Sesion.get(Movcaja.class, codigo);
        if(movim!=null){
            if(movim.getTipomov().getIdtipomov()>4){
                if(movim.getDocumentos()!=null)
                    Sesion.delete(movim.getDocumentos());
                Sesion.delete(movim);
                resu=true;
            }else
                JOptionPane.showMessageDialog(null,"Este Movimiento de caja no puede ser borrado","ATENCIÓN",JOptionPane.INFORMATION_MESSAGE);
        }
        return resu;
 }
 public void cargarComboMoneda(){
        Transaction tx=null;
        Sesion=NewHibernateUtil.getSessionFactory().openSession();
        try{
            tx=Sesion.beginTransaction();
            modelocombomoneda1= new DefaultComboBoxModel();
            modelocombomoneda2= new DefaultComboBoxModel();
            Query q=Sesion.createQuery("from Moneda");
            List lis= q.list();
            if(q.list().size()>0){
                for (int i=0;i<lis.size();i++){
                    Moneda mon=new Moneda();
                    mon=(Moneda)lis.get(i);
                    modelocombomoneda1.addElement(mon.getMoneda());
                    modelocombomoneda2.addElement(mon.getIdmoneda());
                }
            }
            jComboBox4.setModel(modelocombomoneda1);
            tx.commit();
            CERRARSesion();
       }catch(HibernateException e){
           tx.rollback();
            e.printStackTrace();
       }
        CERRARSesion();
   }
   public boolean obtenerObjetoTipoMovDeCombo(){
       boolean resp=false;
       try{
            Sesion = NewHibernateUtil.getSessionFactory().openSession();
            Transaction tx=Sesion.beginTransaction();
            tipomo=new Tipomov();
            tipomo=(Tipomov)Sesion.get(Tipomov.class, obtenerCodigoActualDeComboTipomov());
            tx.commit();
            this.CERRARSesion();
            if(tipomo!=null)
                resp= true;
            else
                resp= false;  
       } catch (HibernateException e) {
           e.printStackTrace();
       }
       return resp;
   }
   public boolean obtenerObjetoFormaPagoDeCombo(){
       boolean resp=false;
       try{
            Sesion = NewHibernateUtil.getSessionFactory().openSession();
            Transaction tx=Sesion.beginTransaction();
            this.forpa=new Formapago();
            forpa=(Formapago)Sesion.get(Formapago.class, this.obtenerCodigoActualDeComboFormaPago());
            tx.commit();
            this.CERRARSesion();
            if(forpa!=null)
                resp= true;
            else
                resp= false;
           
       } catch (HibernateException e) {
           e.printStackTrace();
       }
       return resp;
   }
   public boolean obtenerObjetoBancoDeCombo(){
           boolean resp=false;
       try{
            Sesion = NewHibernateUtil.getSessionFactory().openSession();
            Transaction tx=Sesion.beginTransaction();
            ban=new Banco();
            int codban=this.obtenerCodigoActualDeComboBanco();
            ban=(Banco)Sesion.get(Banco.class, codban );
            tx.commit();
            this.CERRARSesion();
            if(ban!=null){
                resp= true;
                bancoencontrado=true;
               // System.out.println(ban.getNombrebanco());
           }
            else{
                resp= false;
                bancoencontrado=false;
           }
       } catch (HibernateException e) {
           e.printStackTrace();
       }
       return resp;
   }
   public void cargarComboBanco(){
        Transaction tx=null;
        Sesion=NewHibernateUtil.getSessionFactory().openSession();
        try{
            tx=Sesion.beginTransaction();
            modelocombobanco1= new DefaultComboBoxModel();
            modelocombobanco2= new DefaultComboBoxModel();
            Query q=Sesion.createQuery("from Banco");
            List lis= q.list();
            modelocombobanco1.addElement("ninguno");
            modelocombobanco2.addElement(Integer.parseInt("0"));
            if(q.list().size()>0){
                for (int i=0;i<lis.size();i++){
                    Banco banc=new Banco();
                    banc=(Banco)lis.get(i);
                    modelocombobanco1.addElement(banc.getNombrebanco());
                    modelocombobanco2.addElement(banc.getIdbanco());
                }
            }
            jComboBox3.setModel(modelocombobanco1);
            tx.commit();
       }
       catch(HibernateException e){
           tx.rollback();
            e.printStackTrace();
       }
        CERRARSesion();
   }

    public void cargarComboFormaMovimiento(){
        Transaction tx=null;
        Sesion=NewHibernateUtil.getSessionFactory().openSession();
        try{
            tx=Sesion.beginTransaction();
            modelocomboformamov1= new DefaultComboBoxModel();
            modelocomboformamov2= new DefaultComboBoxModel();
            Query q=Sesion.createQuery("from Formapago");
            List lis= q.list();
            if(q.list().size()>0){
                for (int i=0;i<lis.size();i++){
                    Formapago forma=new Formapago();
                    forma=(Formapago)lis.get(i);
                    modelocomboformamov1.addElement(forma.getDescripformapa());
                    modelocomboformamov2.addElement(forma.getIdforma());
                }
            }
            jComboBox2.setModel(modelocomboformamov1);
            tx.commit();
       }
       catch(HibernateException e){
           tx.rollback();
            e.printStackTrace();
       }
        CERRARSesion();
   }


      public void cargarComboTipoMovimiento(){
        Transaction tx=null;
        Sesion=NewHibernateUtil.getSessionFactory().openSession();
        try{
            tx=Sesion.beginTransaction();
            modelocombotipomov1= new DefaultComboBoxModel();
            modelocombotipomov2= new DefaultComboBoxModel();
            Query q=Sesion.createQuery("from Tipomov where exclusivores='0' order by descripconc");
            List lis= q.list();
            if(q.list().size()>0){
                for (int i=0;i<lis.size();i++){
                    tipomo=new Tipomov();
                    tipomo=(Tipomov)lis.get(i);
                    modelocombotipomov1.addElement(tipomo.getDescripconc());
                    modelocombotipomov2.addElement(tipomo.getIdtipomov());
                }
            }
            jComboBox1.setModel(modelocombotipomov1);
            tx.commit();
       }
       catch(HibernateException e){
           tx.rollback();
            e.printStackTrace();
       }
        CERRARSesion();
   }

    public int obtenerCodigoActualDeComboMoneda(){
        int resu=0;
        resu=Integer.parseInt(modelocombomoneda2.getElementAt(this.jComboBox4.getSelectedIndex()).toString());
        return resu;
   }
    public int obtenerCodigoActualDeComboTipomov(){
        int resu=0;
        resu=Integer.parseInt(modelocombotipomov2.getElementAt(this.jComboBox1.getSelectedIndex()).toString());
        return resu;
   }

    public int obtenerCodigoActualDeComboFormaPago(){
        int resu=0;
        resu=Integer.parseInt(modelocomboformamov2.getElementAt(this.jComboBox2.getSelectedIndex()).toString());
        return resu;
   }

    public int obtenerCodigoActualDeComboBanco(){
        int resu=0;
        try{
            resu=Integer.parseInt(modelocombobanco2.getElementAt(jComboBox3.getSelectedIndex()).toString());
        }catch(NumberFormatException e){}
        return resu;
   }
   public void limpiar(){
        jTextField1.setText("");
        jTextField2.setText("0.0");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField5.setText("");
        jFormattedTextField1.setText("");
        //this.ubicarComboBanco(0);
        this.ubicarComboMoneda(0);
       // this.ubicarComboMovimientos(0);
        //this.ubicarComboTipoMov(1);
   }
   
    private void jTextField2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField2FocusGained
        jTextField2.selectAll();
}//GEN-LAST:event_jTextField2FocusGained

    private void jTextField2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField2FocusLost
                                                                        // Texto valor a pagar
        if(jTextField2.getText().isEmpty()==false){   //si no esta vacio
            try{
                float fl=Float.parseFloat(jTextField2.getText());
                if(fl<0){
                    JOptionPane.showMessageDialog(null,"No se admiten números negativos","ATENCIÓN",JOptionPane.INFORMATION_MESSAGE);
                    jTextField2.setText("0.0");
                    jTextField2.requestFocus();
                }
            } catch(NumberFormatException ex){
                JOptionPane.showMessageDialog(null,"Número decimal incorrecto","ATENCIÓN",JOptionPane.INFORMATION_MESSAGE);
                jTextField2.setText("0.0");
                jTextField2.requestFocus();
            }
        } else
            jTextField2.setText("0.0");
}//GEN-LAST:event_jTextField2FocusLost

    private void jTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyReleased
        if(((int)evt.getKeyChar()) == 10) //si se presiono enter en valor pagado
            jTextField2.transferFocus();
}//GEN-LAST:event_jTextField2KeyReleased

    private void jComboBox4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox4MouseClicked

}//GEN-LAST:event_jComboBox4MouseClicked

    private void jComboBox4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox4ItemStateChanged

}//GEN-LAST:event_jComboBox4ItemStateChanged

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
    Transaction tx=null;
        ApeyciecajaGest apeges=new ApeyciecajaGest();
        if(apeges.estaAbierta()){
            Apeyciecaja ape=new Apeyciecaja();
            ape=apeges.getmiapeyciecaja();
            Sesion = NewHibernateUtil.getSessionFactory().openSession();
            tx=Sesion.beginTransaction();
            boolean val=true;  //es false si se kiere editar y no se puede borrar
            try{///////////////OBTIENE MONEDA////////////////////////////////
                if(this.codigomov>0){
                    int xxx=JOptionPane.showConfirmDialog(null,"¿Desea editar este movimiento?","CONSULTA",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                    if(xxx==0){
                        if(this.borrarMovimiento(codigomov)==false)
                            val=false;
                    }else
                        val=false;
                }
                int xx=JOptionPane.showConfirmDialog(null,"¿Desea registrar este movimiento?","CONSULTA",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                if(xx==0 && val){
                        x=0;
                        Moneda moneda=new Moneda();
                        int codmo=obtenerCodigoActualDeComboMoneda();
                        moneda=(Moneda)Sesion.get(Moneda.class, codmo);
                        if(Sesion.isOpen()==false)
                            System.out.println("cerrado1");
      /*                tx.commit();
                        CERRARSesion();*/
                        float monto=Float.parseFloat(jTextField2.getText());
                        if(moneda!=null && tipomo!=null && forpa!=null){
                            boolean escredito=false;
                            boolean valido=false;
                            if(tipomo.getCredito()=='1')
                                escredito=true;
                            if(estanCompletosLosCamposPago(forpa, ban, jTextField1.getText(), jFormattedTextField1.getText())==true){
                                if((monto)>0){
                                        if(!(forpa.getIdforma()>1 && jTextField1.getText().isEmpty())){//si no es efectivo y si el num de doc esta vacio

                                            Movcaja mcaja=new Movcaja();
                                            MovCajaGest mcajagest=new MovCajaGest();
                                            Date fe=new Date();
                                            CajaGest cajages =new CajaGest();
                                            float montoencaja=cajages.existenciaFormaMoneda(forpa.getIdforma(), moneda.getIdmoneda());  //para ver si existe esta forma de paco y moneda
                                            if(escredito){  //resta
                                                if(montoencaja>=monto){
                                                    if(forpa.getIdforma()>1){//si no es efectivo
                                                        valido=encontrodocum;  //iguala
                                                    } else
                                                        valido=true;
                                                }
                                            }else
                                                valido=true;
                                            if(valido){
                                                if(montoencaja < 0){  //no exite esta forma y moneda, entonces hay q crear
                                                    int codcaja=cajages.getsiguientecodigo();
                                                    if(codcaja>0){
                                                        Caja caja=new Caja();
                                                        caja.setIdcaja(codcaja);
                                                        caja.setFormapago(forpa);
                                                        caja.setMoneda(moneda);
                                                        caja.setMonto(cluti.redondear(monto));
                                             /*           Sesion = NewHibernateUtil.getSessionFactory().openSession();
                                                        tx1=Sesion.beginTransaction();*/
                                                        Sesion.save(caja);
                                                        if(Sesion.isOpen()==false)
                                                                System.out.println("cerrado2");
                                           /*             tx1.commit();
                                                        CERRARSesion();*/
                                                    }
                                                }else{  //si se encontro la forma y la moneda hay que sumarle O RESTARLE
                                                    Caja caja=new Caja();
                                                    caja=cajages.getMiCaja();
                                                    if(escredito){
                                                        float mo=cluti.redondear(montoencaja-monto);
                                                        if(mo>0){
                                                            caja.setMonto(mo);
                                             /*               Sesion = NewHibernateUtil.getSessionFactory().openSession();
                                                            tx2=Sesion.beginTransaction();*/
                                                            Sesion.update(caja);
                                                            if(Sesion.isOpen()==false)
                                                                System.out.println("cerrado3");
                                                   /*         tx2.commit();
                                                            CERRARSesion();*/
                                                        }else{  //si el monto en caja es 0 borra
                                              /*              Sesion = NewHibernateUtil.getSessionFactory().openSession();
                                                            tx2=Sesion.beginTransaction();*/
                                                            Sesion.delete(caja);
                                                            if(Sesion.isOpen()==false)
                                                                System.out.println("cerrado4");
                                                /*            tx2.commit();
                                                            CERRARSesion();*/
                                                        }
                                                    }else{
                                                        caja.setMonto(cluti.redondear(montoencaja+monto));
                                    /*                    Sesion = NewHibernateUtil.getSessionFactory().openSession();
                                                        tx3=Sesion.beginTransaction();*/
                                                        Sesion.update(caja);
                                                        if(Sesion.isOpen()==false)
                                                                System.out.println("cerrado5");
                                            /*            tx3.commit();
                                                        CERRARSesion();*/
                                                    }
                                                }
                                              //  int codmcaja=mcajagest.getsiguientecodigo();
                                                 DocumentoGest docges=new DocumentoGest();
                                                 Documentos doc=new Documentos();
                                                if(escredito==false){  //si suma
                                                    int coddoc=docges.getsiguientecodigo();
                                                    if(/*codmcaja>0 && */coddoc>0){
                                                        if(forpa.getIdforma()>1){
                                                            doc.setIddoc(coddoc);
                                                            doc.setMoneda(moneda);
                                                            doc.setObsdoc(jTextField3.getText());
                                                            doc.setFormapago(forpa);
                                                            doc.setMonto(cluti.redondear(monto));
                                                            if(tipomo.getCredito()==1)  //efectivo
                                                                doc.setEncaja('0');
                                                            else
                                                                doc.setEncaja('1');
                                                            if(forpa.getTienebanco()=='1')
                                                                doc.setBanco(ban);
                                                            if(forpa.getTienenumero()=='1')
                                                                doc.setNumerodoc(jTextField1.getText());
                                                            if(forpa.getTienefecha()=='1')
                                                                doc.setFechavenc(cluti.StrDMA_Date(jFormattedTextField1.getText()));
                                         /*                   Sesion = NewHibernateUtil.getSessionFactory().openSession();
                                                            tx4=Sesion.beginTransaction();*/
                                                            Sesion.save(doc);
                                                            if(Sesion.isOpen()==false)
                                                                System.out.println("cerrado6");
                                                /*            tx4.commit();
                                                            CERRARSesion();*/
                                                            mcaja.setDocumentos(doc);  //solo si es un doc se guarda esto
                                                        }
                                                    }
                                                }else{
                                                    if(forpa.getIdforma()>1){//no es efectivo
                                                        if(forpa.getTienenumero()=='1'){
                                                            if(forpa.getTienebanco()=='1'){
                                                                if(docges.existeDocumentoConNumeroYBanco(jTextField1.getText(), ban.getIdbanco()))
                                                                    doc=docges.getMiDocumento();
                                                            }else{
                                                                if(docges.existeDocumentoConNumero(jTextField1.getText()))
                                                                    doc=docges.getMiDocumento();
                                                            }
                                                        }
                                            /*            Sesion = NewHibernateUtil.getSessionFactory().openSession();
                                                        tx4=Sesion.beginTransaction();*/
                                                        doc.setEncaja('0');
                                                        Sesion.saveOrUpdate(doc);
                                                        if(Sesion.isOpen()==false)
                                                                System.out.println("cerrado7");
                                       /*                 tx4.commit();
                                                        CERRARSesion();*/
                                                        mcaja.setDocumentos(doc);
                                                    }
                                                }
                                //                mcaja.setIdmov(codmcaja);
                                                float montogs=cluti.redondear(monto*moneda.getVenta());
                                                mcaja.setTipomov(tipomo);
                                                mcaja.setFeyhomov(fe);
                                                mcaja.setMontomov(cluti.redondear(monto));
                                                mcaja.setFormapago(forpa);
                                                mcaja.setMoneda(moneda);
                                                mcaja.setApeyciecaja(ape);
                                                mcaja.setMontogs(montogs);
                                                mcaja.setMontogscondesc(montogs-(montogs*forpa.getPordesc()/100));
                                                if(this.jTextField5.getText().isEmpty())
                                                    mcaja.setNumcompro("");
                                                else
                                                    mcaja.setNumcompro(this.jTextField5.getText());
                                                if(this.jTextField4.getText().isEmpty())
                                                    mcaja.setObs("");
                                                else
                                                    mcaja.setObs(this.jTextField4.getText());
                                   /*             Sesion = NewHibernateUtil.getSessionFactory().openSession();
                                                Transaction t=Sesion.beginTransaction();*/
                                                Sesion.save(mcaja);
                                      /*          t.commit();
                                                CERRARSesion();*/
                                                tx.commit();
                                                x=1;
                                                if(this.codigomov>0)
                                                    JOptionPane.showMessageDialog(null,"Movimiento editado correctamente","AVISO",JOptionPane.INFORMATION_MESSAGE);
                                                else
                                                    JOptionPane.showMessageDialog(null,"Movimiento registrado correctamente","AVISO",JOptionPane.INFORMATION_MESSAGE);
                                                this.limpiarTodo();
                                            }else
                                                JOptionPane.showMessageDialog(null,"Monto y valor seleccionados no se encuentran disponibles actualmente en caja","ATENCIÓN",JOptionPane.INFORMATION_MESSAGE);
                                        }else
                                            JOptionPane.showMessageDialog(null,"Campo Número de documento vacío","ATENCIÓN",JOptionPane.INFORMATION_MESSAGE);
                                }else
                                    JOptionPane.showMessageDialog(null,"Favor ingresar el importe antes de continuar","PETICIÓN",JOptionPane.INFORMATION_MESSAGE);
                            }else
                                JOptionPane.showMessageDialog(null,"Favor completar los campos requeridos o realizar la búsqueda de un documento antes de continuar","PETICIÓN",JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                } catch(HibernateException e){
                    e.printStackTrace();
                     JOptionPane.showMessageDialog(null,"No se pudo guardar correctamente este movimiento","ERROR",JOptionPane.ERROR_MESSAGE);
                } catch(ParseException e1){
                    e1.printStackTrace();
                    // tx.rollback();
                }
            
            if(apeges.estaAbierta()){
                ape=new Apeyciecaja();
                ape=this.apeges.getmiapeyciecaja();
                //////////////para el navegador de busqueda/////////////////
                if (x==1){  //si se llevo a cabo algun cambio
                    Sesion=NewHibernateUtil.getSessionFactory().openSession();
                    Sesion.beginTransaction();
                    consulta=Sesion.createQuery("from Movcaja where apeyciecaja = "+ape.getIdayccaja()+" and idtipomov > 4");
                    milista=consulta.list();
                    Sesion.getTransaction().commit();
                }
                ///////////////////////////////////////////////////////////////*/
            }
    }else
         JOptionPane.showMessageDialog(null,"Debe abrir caja antes de realizar un movimiento sobre la misma","ATENCIÓN",JOptionPane.INFORMATION_MESSAGE);
}//GEN-LAST:event_jButton3MouseClicked

    private void jFormattedTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextField1FocusLost
        String texto=jFormattedTextField1.getText();                            //cuadro de fecha
        this.actualizarFechaDeHoy();
        if(texto.equals("  /  /    ")==false){  //si no esta vacio
            if(cluti.FechaValidaDMA(texto)==false){  //si la fecha no es valida
                JOptionPane.showMessageDialog(null,"Fecha NO válida","ATENCIÓN",JOptionPane.INFORMATION_MESSAGE);
                jFormattedTextField1.requestFocus();
                jFormattedTextField1.setText("");
            }
            if(cluti.esFecha1MenorALaFecha2(jFormattedTextField1.getText(),fechadehoy) || cluti.esFecha1IgualALaFecha2(jFormattedTextField1.getText(),fechadehoy)){  //si la fecha es <= a la actual
                JOptionPane.showMessageDialog(null,"Fecha Menor o igual a la actual","ATENCIÓN",JOptionPane.INFORMATION_MESSAGE);
                jFormattedTextField1.requestFocus();
                jFormattedTextField1.setText("");
            }
        }
}//GEN-LAST:event_jFormattedTextField1FocusLost

    private void jFormattedTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFormattedTextField1KeyReleased
        if(((int)evt.getKeyChar()) == 10) //si se presiono enter
            jFormattedTextField1.transferFocus();
}//GEN-LAST:event_jFormattedTextField1KeyReleased

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
                                                                  //centra el objeto en pantalla
          this.setResizable(false);
          this.setLocationRelativeTo(null);  //centra el objeto en pantalla
         // setDefaultCloseOperation(0);
          Sesion = NewHibernateUtil.getSessionFactory().getCurrentSession();                                                      // al iniciar
          cargarComboFormaMovimiento();
          cargarComboTipoMovimiento();
          cargarComboBanco();
          cargarComboMoneda();
          //banco no cargo porque esta en ninguno al empezar
          this.obtenerObjetoFormaPagoDeCombo();
          this.obtenerObjetoTipoMovDeCombo();
          this.setResizable(false);
          if(apeges.estaAbierta()){
                Apeyciecaja ape=new Apeyciecaja();
                ape=this.apeges.getmiapeyciecaja();
                //////////////para el navegador de busqueda/////////////////
                    Sesion=NewHibernateUtil.getSessionFactory().openSession();
                    Sesion.beginTransaction();
                    consulta=Sesion.createQuery("from Movcaja where apeyciecaja = "+ape.getIdayccaja()+" and idtipomov > 4");
                    milista=consulta.list();
                    Sesion.getTransaction().commit();
                ///////////////////////////////////////////////////////////////*/
            }
    }//GEN-LAST:event_formWindowOpened

    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
                                                                            //seleccioon forma pago
       /* this.obtenerObjetoBancoDeCombo();
         if(obtenerObjetoFormaPagoDeCombo()){
            if(forpa.getTienebanco()=='1')
                jComboBox3.setEnabled(true);
            else
                jComboBox3.setEnabled(false);
            if(forpa.getTienefecha()=='1')
                jFormattedTextField1.setEnabled(true);
            else
                jFormattedTextField1.setEnabled(false);
            if(forpa.getTienenumero()=='1')
                jTextField1.setEnabled(true);
            else
                jTextField1.setEnabled(false);
            if(forpa.getIdforma()==1){//si es efectivo
               jTextField2.setEnabled(true);
               jComboBox3.setEnabled(false);
               jFormattedTextField1.setEnabled(false);
               jTextField1.setEnabled(false);
             }
         }*/
        if(bandera){  //para que no se ejecute 2 veces
            this.bandera=false;
            this.limpiarTodo();  //ya incluye habilitarODeshabilitarCampos();
            this.jComboBox2.transferFocus();
        }
        
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        if(bandera){  //para que no se ejecute 2 veces
            this.bandera=false;
            this.limpiarTodo();  //ya incluye habilitarODeshabilitarCampos();
           // habilitarODeshabilitarCampos();
            this.jComboBox1.transferFocus();
        }
          
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox3ItemStateChanged
                                                                         //seleccion banco
        if(bandera){//para no ejecutar 2 veces
            int co=obtenerCodigoActualDeComboBanco();
            this.obtenerObjetoBancoDeCombo();
            if(this.forpa!=null && this.tipomo!=null && jTextField1.getText().isEmpty()==false && co>0 && jComboBox3.isEnabled()){//se obtiene el comprobante que coincida con el num, que tengan numero y que siguen en caja
                if(forpa.getTienenumero()=='1' && tipomo.getCredito()=='1'){  //si no tiene banco, se tiene que ejecutar aca la busqueda y si se quiere extraer el cheque de caja se busca
                    Transaction tx=null;
                    Sesion=NewHibernateUtil.getSessionFactory().openSession();
                    try{
                        tx=Sesion.beginTransaction();
                        Query q=Sesion.createQuery("from Documentos as d where d.numerodoc = '"+jTextField1.getText()+"' and d.banco = "+co+" and d.encaja='1'");
                        List liis= q.list();
                        if(liis.size()>0){
                            Documentos doc=new Documentos();
                            doc=(Documentos)liis.get(0);
                            jTextField2.setText(Float.toString(doc.getMonto()));
                            ubicarComboMoneda(doc.getMoneda().getIdmoneda());
                            if(doc.getFormapago().getTienefecha()=='1'){
                                jFormattedTextField1.setText(cluti.ObtenerFechaSinGuion(cluti.Date_StringDMA(doc.getFechavenc())));
                            }
                        encontrodocum=true;
                       ////////////////// deshabilitarCampos();
                        }else{
                            encontrodocum=false;
                        ////////////////    habilitarCampos();
                            JOptionPane.showMessageDialog(null,"Documento no encontrado","ATENCIÓN",JOptionPane.INFORMATION_MESSAGE);
                            //this.jTextField1.requestFocus();
                            this.jTextField2.setText("0.0");
                            this.jTextField3.setText("");
                            this.jFormattedTextField1.setText("        ");
                        }
                        tx.commit();
                   }
                   catch(HibernateException e){
                        e.printStackTrace();
                   }
                     this.CERRARSesion();
               }
           }
            this.bandera=false;
            this.jComboBox3.transferFocus();
        }
    }//GEN-LAST:event_jComboBox3ItemStateChanged

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost
                                                                    // lost del numdoc
        this.obtenerObjetoFormaPagoDeCombo();
        this.obtenerObjetoTipoMovDeCombo();
        if(this.forpa!=null && this.tipomo!=null && jTextField1.getText().isEmpty()==false){
            if(forpa.getTienenumero()=='1' && tipomo.getCredito()=='1'){  //si no tiene banco, se tiene que ejecutar aca la busqueda y si se quiere extraer el cheque de caja se busca
                String consulta="";
                if(forpa.getTienebanco()=='0')
                    consulta="from Documentos as d where d.numerodoc = '"+jTextField1.getText()+"' and d.encaja='1'";
                else{                                                                                  //se obtiene el comprobante que coincida con el num, que tengan numero y que siguen en caja
                    int co=obtenerCodigoActualDeComboBanco();
                    if(co>0){
                        consulta="from Documentos as d where d.numerodoc = '"+jTextField1.getText()+"' and d.banco = "+co+" and d.encaja='1'";
                    }else                                                                                                         //se obtienen el comprobante que coincida con el num y banco y tengan numero y y banco y que siguen en caja
                        consulta="";
                }
                if(consulta.equals("")==false){  //si no esta vacio

                        Transaction tx=null;
                        Sesion=NewHibernateUtil.getSessionFactory().openSession();
                        try{
                            tx=Sesion.beginTransaction();
                            Query q=Sesion.createQuery(consulta);
                            if(q.list().size()>0){
                                Documentos doc=new Documentos();
                                doc=(Documentos)q.list().get(0);
                                jTextField2.setText(Float.toString(doc.getMonto()));
                                ubicarComboMoneda(doc.getMoneda().getIdmoneda());
                                if(doc.getFormapago().getTienefecha()=='1'){
                                    jFormattedTextField1.setText(cluti.ObtenerFechaSinGuion(cluti.Date_StringDMA(doc.getFechavenc())));
                                }
                                this.jTextField3.setText(doc.getObsdoc());
                                encontrodocum=true;
                         //////////////       deshabilitarCampos();

                            }else{
                                encontrodocum=false;
                                JOptionPane.showMessageDialog(null,"Documento no encontrado","ATENCIÓN",JOptionPane.INFORMATION_MESSAGE);
                                //this.jTextField1.requestFocus();
                                this.jTextField2.setText("0.0");
                                this.jTextField3.setText("");
                                this.jFormattedTextField1.setText("        ");
                           //////////////     habilitarCampos();
                            }
                            tx.commit();
                       }
                       catch(HibernateException e){
                            e.printStackTrace();
                       }
                        this.CERRARSesion();
                        
                }
            }
        }
    }//GEN-LAST:event_jTextField1FocusLost

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
                                                                 //para validar el CAMPO DE TEXTO documento
        if(jTextField1.getText().length()<30){
            if(((int)evt.getKeyChar()) == 10) //si se presiono enter
                jTextField1.transferFocus();
        }
        else
            evt.consume();
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped
                                                                 //para validar el CAMPO DE TEXTO observaciones
        if(jTextField3.getText().length()<60){
            if(((int)evt.getKeyChar()) == 10) //si se presiono enter
                jTextField3.transferFocus();
        }
        else
            evt.consume();
    }//GEN-LAST:event_jTextField3KeyTyped

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton9MouseClicked
        //BOTON SALIR
        this.dispose();
}//GEN-LAST:event_jButton9MouseClicked

    private void jButton8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton8MouseClicked
        //BOTON LIMPIAR
        limpiarTodo();
}//GEN-LAST:event_jButton8MouseClicked

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox3FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox3FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3FocusLost

    private void jComboBox1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox1FocusGained
        this.bandera=true;
    }//GEN-LAST:event_jComboBox1FocusGained

    private void jComboBox2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox2FocusGained
        this.bandera=true;
    }//GEN-LAST:event_jComboBox2FocusGained

    private void jComboBox3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox3FocusGained
         this.bandera=true;
    }//GEN-LAST:event_jComboBox3FocusGained

    private void jComboBox4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox4FocusGained

    }//GEN-LAST:event_jComboBox4FocusGained

    private void jTextField4KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyTyped
                                                        //para validar el CAMPO DE TEXTO observaciones movimiento
        if(jTextField4.getText().length()<60){
            if(((int)evt.getKeyChar()) == 10) //si se presiono enter
                jTextField4.transferFocus();
        }
        else
            evt.consume();
    }//GEN-LAST:event_jTextField4KeyTyped

    private void jTextField5KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField5KeyTyped
                                                                    //para validar el CAMPO DE TEXTO NUMERO COMPRO
        if(jTextField5.getText().length()<30){
            if(((int)evt.getKeyChar()) == 10) //si se presiono enter
                jTextField5.transferFocus();
        }
        else
            evt.consume();
    }//GEN-LAST:event_jTextField5KeyTyped

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        //BOTON PRIMERO
        if(this.apeges.estaAbierta()){
            if(milista.isEmpty()==false){  //si no esta vacia la lista, es decir si hay algun registro en la tabla
                contador=1;
                movi=(Movcaja) (milista.get(contador-1));
                this.buscarMovimiento(movi.getIdmov());
                habilitarODeshabilitarCampos();
            }
        }else
             JOptionPane.showMessageDialog(null,"La caja no está abierta","ATENCIÓN",JOptionPane.INFORMATION_MESSAGE);
}//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        //BOTON ANTERIOR
        if(this.apeges.estaAbierta()){
            if(milista.isEmpty()==false){  //si no esta vacia la lista, es decir si hay algun registro en la tabla
               if(this.codigomov==0)
                    contador=1;
                else{
                    if (contador!=1)  //si no se llego al final
                        contador--;
                }
                movi=(Movcaja) (milista.get(contador-1));
                this.buscarMovimiento(movi.getIdmov());
                habilitarODeshabilitarCampos();
            }
        }else
         JOptionPane.showMessageDialog(null,"La caja no está abierta","ATENCIÓN",JOptionPane.INFORMATION_MESSAGE);
}//GEN-LAST:event_jButton2MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        //BOTON SIGUIENTE
        if(this.apeges.estaAbierta()){
            if(milista.isEmpty()==false){  //si no esta vacia la lista, es decir si hay algun registro en la tabla
                if(this.codigomov==0)
                    contador=1;
                else{
                    if (contador!=milista.size())  //si no se llego al final
                        contador++;
                }
                movi=(Movcaja) (milista.get(contador-1));
                this.buscarMovimiento(movi.getIdmov());
                habilitarODeshabilitarCampos();
            }
         }else
             JOptionPane.showMessageDialog(null,"La caja no está abierta","ATENCIÓN",JOptionPane.INFORMATION_MESSAGE);
}//GEN-LAST:event_jButton4MouseClicked

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        //BOTON ULTIMO
        if(this.apeges.estaAbierta()){
            if(milista.isEmpty()==false){  //si no esta vacia la lista, es decir si hay algun registro en la tabla
                contador=milista.size();
                movi=(Movcaja) (milista.get(contador-1));
                this.buscarMovimiento(movi.getIdmov());
                habilitarODeshabilitarCampos();
            }
        }else
             JOptionPane.showMessageDialog(null,"La caja no está abierta","ATENCIÓN",JOptionPane.INFORMATION_MESSAGE);
}//GEN-LAST:event_jButton5MouseClicked

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked
                                       //BOTON NUEVO
        limpiarTodo();   //hace lo mismo que limpiar
}//GEN-LAST:event_jButton6MouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseClicked
        int r=0;                                                     //BOTON BORRAR
        if (this.codigomov > 0){
            r=JOptionPane.showConfirmDialog(null,"¿Desea BORRAR este Movimiento de Caja?", "CONSULTA", JOptionPane.YES_NO_OPTION);
            if (r==JOptionPane.YES_OPTION){ //si se presiono SI
                if(Integer.parseInt(jTextField1.getText())>1){
                    Sesion=NewHibernateUtil.getSessionFactory().openSession();
                    Sesion.beginTransaction();
                    try {
                        if(this.borrarMovimiento(codigomov)){
                            Sesion.getTransaction().commit();
                            this.limpiarTodo();
                            x=1;
                            JOptionPane.showMessageDialog(null,"Movimiento de Caja borrado correctamente","AVISO",JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(null,"No se pudo BORRAR correctamente el Movimiento de Caja","ATENCIÓN",JOptionPane.INFORMATION_MESSAGE);
                            x=0;
                        }

                    } catch (HibernateException ex) {
                        // JOptionPane.showMessageDialog(null,"Error al intentar BORRAR el registro","ERROR",JOptionPane.ERROR_MESSAGE);
                        //ya tira el error en bancogest
                        this.limpiarTodo();
                        x=0;
                    }
                   if(apeges.estaAbierta()){
                        Apeyciecaja ape=new Apeyciecaja();
                        ape=this.apeges.getmiapeyciecaja();
                        //////////////para el navegador de busqueda/////////////////
                        if (x==1){  //si se llevo a cabo algun cambio
                            Sesion=NewHibernateUtil.getSessionFactory().openSession();
                            Sesion.beginTransaction();
                            consulta=Sesion.createQuery("from Movcaja where apeyciecaja = "+ape.getIdayccaja()+" and idtipomov > 4");
                            milista=consulta.list();
                            Sesion.getTransaction().commit();
                        }
                        ///////////////////////////////////////////////////////////////*/
                    }
                }
            }else
                JOptionPane.showMessageDialog(null,"No está permitido borrar este registro","ATENCIÓN",JOptionPane.INFORMATION_MESSAGE);
        } else{
            JOptionPane.showMessageDialog(null,"Favor seleccionar un elemento a borrar","ATENCIÓN",JOptionPane.INFORMATION_MESSAGE);
            x=0;
        }
}//GEN-LAST:event_jButton7MouseClicked

    private void jButton7MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseEntered
        // TODO add your handling code here:
}//GEN-LAST:event_jButton7MouseEntered

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmMovCaja dialog = new FrmMovCaja(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables

}
